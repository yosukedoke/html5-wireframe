(function(root, factory) {
  if (typeof exports !== 'undefined') {
    var $ = require('jquery');
    module.exports = factory(root, $);
  } else if (typeof define === 'function' && define.amd) {
    define(['jquery'], function($) {
      root.Cisolasse = factory(root, $);
    });
  } else {
    root.Cisolasse = factory(root, (root.jQuery || root.Zepto || root.ender || root.$));
  }
})(this, function (root, $, undefined) {
  'use strict';
  var KEY_TYPE      = 'type',
      KEY_GROUP     = 'group',
      KEY_CISOLASSE = 'cisolasse';
  function parse(obj, lang) {
    var result = {};
    for (var key in obj) {
      var record = obj[key];
      if (!(KEY_TYPE in record)) {
        result[key] = record[lang];

      } else {
        switch (record[KEY_TYPE]) {
          case KEY_GROUP:
            result[key] = parse(record[KEY_CISOLASSE], lang);
            break;
        }
      }
    }
    return result;
  }

  function nop() {/* do nothing */}

  var cisolasse,
      isLoading = false,
      defaults = {
        SELECTOR_ATTR_NAME : 'data-variable-name'
      },
      lang = {
        EN: 'en',
        JA: 'ja'
      };

  return {
    lang: lang,
    defaults: defaults,
    setJSON : function (jsonString, langType) {
      try {
        this.setJSON(JSON.parse(jsonString), langType);
      }
      catch(error) {
      }
    },
    setObject : function (obj, langType) {
      cisolasse = parse(obj, (langType || lang.JA));
    },
    load : function (url, options, callbacks) {
      options = options || {};

      var autoAttach = function ($target) {
        this.attachAll($target);
      };

      if(!options.$target || !options.autoAttach) {
        autoAttach = nop;
      }

      callbacks = callbacks || {};
      if(!('complete' in callbacks)) { callbacks.complete = nop; }
      if(!('error' in callbacks)) { callbacks.error = nop; }

      if (isLoading || (cisolasse && !options.noCache)) { return; }

      isLoading = true;

      var self = this;
      $.getJSON(url).done(function (obj) {
        isLoading = false;
        self.setObject(obj);
        callbacks.complete();
        autoAttach.apply(self, [options.$target]);
      }).error(function () {
        isLoading = false;
        callbacks.error();
      });
    },
    attachAll: function ($target, options) {
      options = options || {};

      if(!cisolasse) { return; }

      var attrName = (options.attrName || defaults.SELECTOR_ATTR_NAME);
      $target = ($target || $(document)).find('*[' + attrName + ']');

      $target.each(function () {
        var $this = $(this);
        var paths = $this.attr(attrName).split('.');

        if(!paths || paths.length === 0) { return; }

        var current = cisolasse;
        for(var key in paths) {
          current = current[paths[key]];
        }

        if(!current) { return; }

        $this.text(current);
      });
    }
  };
});
(function(root, factory) {
  if (typeof exports !== 'undefined') {
    var $ = require('jquery');
    module.exports = factory(root, $);
  } else if (typeof define === 'function' && define.amd) {
    define([ 'jquery'], function($) {
      root.Partial = factory(root, $);
    });
  } else {
    root.Partial = factory(root, (root.jQuery || root.Zepto || root.ender || root.$));
  }
})(this, function (root, $, undefined) {
  'use strict';

  var defaults = {
    FILTER_ATTR_NAME : 'data-filter',
    SELECTOR_ATTR_NAME : 'data-partial',
    CONTENTS  : ' main > *'
  };
  function Partial($target, options) {
    this.options = options || {};

    this.$target = $target;
  }
  function nop() {/* do nothing */}

  Partial.defaults = defaults;
  Partial.prototype = {
    $target: null,
    load : function (callback) {
      callback = callback || nop;
      var filepath = this.$target.attr(defaults.SELECTOR_ATTR_NAME);
      var data;

      if(filepath.match(/\.ejs$/) && !!EJS) {
        try{
          data = JSON.parse(this.$target.text()) || {};
        }
        catch(error) {
          data = {};
        }

        this.$target.html(new EJS({url:filepath}).render(data));
        callback();
      }
      else {
        this.$target.load(filepath + defaults.CONTENTS, function() {
          callback();
        });
      }
    }
  };

  // TODO:セレクターの構築のところをリファクタリング
  function ignoreElements($target, ignores) {
    $.each(ignores, function(i, value) {
      $target.find('*[' + defaults.FILTER_ATTR_NAME + '][' + defaults.FILTER_ATTR_NAME + '!=' + value + ']').remove();
    });

    $target.find('*[' + defaults.FILTER_ATTR_NAME + ']').removeAttr(defaults.FILTER_ATTR_NAME);

    return $target;
  }

  function build($target, options) {
    var callbacks = {};
    options = options || {};

    callbacks.progress = 'progress' in options ? options.progress : nop;
    callbacks.complete = 'complete' in options ? options.complete : nop;

    var $scope = $target.find('*[' + defaults.SELECTOR_ATTR_NAME + ']');

    var count = 0;
    var total = $scope.length;

    function complete() {
      count++;
      if(count === total) {
        options.complete();
      }
      else {
        options.progress(count, total);
      }
    }
    $scope.each(function() {
      new Partial($(this)).load(complete);
    });
  }

  Partial.ignore = ignoreElements;
  Partial.build = build;
  return Partial;

});
(function(root, factory) {
  if (typeof exports !== 'undefined') {
    var $ = require('jquery');
    var Partial = require('./Partial');
    var Cisolasse = require('./Cisolasse');
    module.exports = factory(root, $, Partial, Cisolasse);
  } else if (typeof define === 'function' && define.amd) {
    define([ 'jquery', './Partial', './Cisolasse'], function($, Partial, Cisolasse) {
      root.Wireframe = factory(root, $, Partial, Cisolasse);
    });
  } else {
    root.Wireframe = factory(root, (root.jQuery || root.Zepto || root.ender || root.$), root.Partial, root.Cisolasse);
  }

})(this, function (root, $, Partial, Cisolasse, undefined) {
  'use strict';

  var QueryActions = (function () {
    var actions = {};
    return {
      parse : function(query) {
        var result = {};

        if(!query) { return result; }

        var regExp = /(.+?)=(.+)/;
        var params = query.split('&');
        for(var i in params) {
          var param = params[i];
          // check valid key-value string.
          if(!regExp.test(param)) continue;
          var keyvalue = param.match(regExp);
          result[keyvalue[1]] = keyvalue[2];
        }
        return result;
      },
      add: function(name, func, options) {
        options = options || {};
        options.name = name;
        var scope = this;
        actions[name] = function(value) {
          if(value === undefined) value = options.defaultValue;
          func.apply(scope, [value, options]);
        };
      },
      doAction: function (key, value) {
        if(typeof(actions[key]) !== 'function') { return; }

        var action = actions[key];

        try {
          action.apply(null, [value]);
        }
        catch (err) {}
      },
      attachQuery: function (queries) {
        for (var key in actions) {
          this.doAction(key, key in queries ? queries[key] : undefined);
        }
      }
    };
  })();

  var HashActions = (function() {
    var actions = {};
    return {
      init: function () {
        var self = this;
        var onhashchange = function(event) {
          var hash = location.hash.substr(1);
          self.doAction(hash);
        };

        $(window).on('hashchange', onhashchange).trigger('hashchange');
      },
      add: function (name, func) {
        actions[name] = func;
      },
      doAction: function (key) {
        var action = actions[key||'default'];

        if (!action || typeof(action) !== 'function') return;

        try {
          action.apply(null, []);
        }
        catch (err) {}
      }
    };
  })();

  return {
    Partial: Partial,
    Cisolasse: Cisolasse,
    QueryActions: QueryActions,
    HashActions : HashActions,
    init : function() {
      $('article, section, nav, aside, h1, h2, h3, h4, h5, h6').each(function(i, el) {
        $(el).attr('data-name', el.tagName.toLocaleLowerCase());
      });
    },
    initWithPartials : function($target, options) {
      options = options || {};

      var self = this;
      var complete = options.complete || function () {};
      options.complete = function () {
        self.init();
        complete.apply(null, arguments);
      };
      Partial.build($target, options);
    }
  };
})